void _start(word64 rdx, word32 dwArg00, char * ptrArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdx:[0..63] Stack +0000:[0..31] Stack +0008:[0..63]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
_start_exit:
_start_entry:
	ptr64 fp
	word64 qwArg00
l0000000000000620:
	__align_stack<word64>(&ptrArg08)
	__libc_start_main(0x0000000000000898<p64>, SLICE(qwArg00, int32, 0), &ptrArg08, 0x0000000000000A70<p64>, 0x0000000000000AE0<p64>, rdx, fp)
	__halt()


void deregister_tm_clones()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __do_global_dtors_aux
// MayUse: 
// LiveOut:
// Trashed: SCZOP rax rdi Top
// Preserved: rbp rsp
deregister_tm_clones_entry:
l0000000000000650:
	branch 0x0000000000201048<p64> == 0x0000000000201048<p64> l0000000000000680
l0000000000000667:
	branch _ITM_deregisterTMCloneTable == 0<64> l0000000000000680
l0000000000000680:
	return
l0000000000000673:
	_ITM_deregisterTMCloneTable()
	return
deregister_tm_clones_exit:


void register_tm_clones()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      frame_dummy
// MayUse: 
// LiveOut:
// Trashed: SCZOP rax rdi rsi Top
// Preserved: rbp rsp
register_tm_clones_entry:
l0000000000000690:
	word64 rsi_9 = 0x0000000000201048<p64> - 0x0000000000201048<p64>
	branch (rsi_9 >> 3<64>) + ((rsi_9 >> 3<64>) >>u 0x3F<64>) >> 1<64> == 0<64> l00000000000006D0
l00000000000006B8:
	branch _ITM_registerTMCloneTable == 0<64> l00000000000006D0
l00000000000006D0:
	return
l00000000000006C4:
	_ITM_registerTMCloneTable()
	return
register_tm_clones_exit:


void __do_global_dtors_aux()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rdi Top
// Preserved: P rbp rsp
__do_global_dtors_aux_entry:
l00000000000006E0:
	branch Mem0[0x0000000000201048<p64>:byte] != 0<8> l0000000000000718
l0000000000000718:
	return
l00000000000006E9:
	branch __cxa_finalize == 0<64> l0000000000000703
l00000000000006F7:
	__cxa_finalize(Mem10[0x0000000000201040<p64>:word64])
l0000000000000703:
	deregister_tm_clones()
	Mem23[0x0000000000201048<p64>:byte] = 1<8>
	return
__do_global_dtors_aux_exit:


void frame_dummy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZOP rax rdi rsi Top
// Preserved: rbp rsp
frame_dummy_entry:
l0000000000000720:
l0000000000000725_thunk_register_tm_clones:
	register_tm_clones()
	return
frame_dummy_exit:


word64 _mm_malloc(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      main
// MayUse:  rdi:[0..63] rsi:[0..63]
// LiveOut: rax
// Trashed: SCZOP rax rcx rdi rdx rsi Top
// Preserved: rbp rsp
_mm_malloc_entry:
	ptr64 fp
	word64 qwLoc10
l000000000000072A:
	word64 rax_44
	word64 qwLoc28_56 = rsi
	branch rsi != 1<64> l000000000000074F
l000000000000074F:
	branch rsi == 2<64> l000000000000075D
l0000000000000756:
	branch rsi != 4<64> l0000000000000765
l000000000000075D:
	qwLoc28_56 = 8<64>
l0000000000000765:
	branch SLICE(posix_memalign(qwLoc28_56, fp - 16<i64>, rdi, qwLoc28_56), word32, 0) != 0<32> l0000000000000786
l0000000000000786:
	rax_44 = 0<u64>
l0000000000000780:
	rax_44 = qwLoc10
l0000000000000741:
	rax_44 = malloc(rdi)
l000000000000078B:
	return rax_44
_mm_malloc_exit:


void _mm_free(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      main
// MayUse:  rdi:[0..63]
// LiveOut:
// Trashed: SCZO rax Top
// Preserved: rbp rdi rsp
_mm_free_entry:
l000000000000078D:
	free(rdi)
	return
_mm_free_exit:


void vec_add(word64 rcx, word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      main
// MayUse:  rcx:[0..63] rdi:[0..63] rdx:[0..63] rsi:[0..63]
// LiveOut:
// Trashed: SCZO r10 rax rcx rdx Top ymm0 ymm1
// Preserved: rbp rsp
vec_add_entry:
	ptr64 fp
l00000000000007A8:
	__align_stack<word64>(fp)
	word64 rax_31 = CONVERT(CONVERT(rdi, word64, uint128) /u Mem23[0x0000000000000B00<p64>:word64], word64, uint64)
	word64 qwLoc28_100 = 0<64>
l0000000000000881:
	branch qwLoc28_100 <u rax_31 l0000000000000820
l0000000000000820:
	Mem69[rsi + (qwLoc28_100 << 5<64>):word256] = __simd_fadd<real64[4]>(Mem42[rdx + (qwLoc28_100 << 5<64>):word256], Mem42[rcx + (qwLoc28_100 << 5<64>):word256])
	qwLoc28_100 = qwLoc28_100 + 1<64>
l000000000000088B:
	return
vec_add_exit:


void main()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZOP r10 rax rcx rdi rdx rsi Top xmm0 ymm1
// Preserved: rbp rsp
main_entry:
	word128 xmm0
l0000000000000898:
	word64 rax_16 = _mm_malloc(0x20<u64>, 0x2000<64>)
	word64 rax_33 = _mm_malloc(0x20<u64>, 0x2000<64>)
	word64 rax_50 = _mm_malloc(0x20<u64>, 0x2000<64>)
	word64 qwLoc10_220 = 0<64>
l000000000000093F:
	branch qwLoc10_220 <u 0x400<64> l00000000000008FD
l00000000000008FD:
	word64 rcx_70 = qwLoc10_220 * 8<64> + rax_16
	word32 eax_78 = SLICE(qwLoc10_220, word32, 0)
	branch qwLoc10_220 < 0<64> l0000000000000921
l0000000000000921:
	real64 v27_85 = CONVERT(qwLoc10_220 >>u 1<64> | CONVERT(eax_78 & 1<32>, word32, uint64), word64, real64)
	xmm0 = SEQ(0<64>, v27_85 + v27_85)
l000000000000091A:
	xmm0 = SEQ(SLICE(xmm0, word64, 64), CONVERT(qwLoc10_220, word64, real64))
l0000000000000936:
	Mem94[rcx_70:real64] = SLICE(xmm0, real64, 0)
	qwLoc10_220 = qwLoc10_220 + 1<64>
l0000000000000949:
	word64 qwLoc18_226 = 0<64>
l0000000000000998:
	branch qwLoc18_226 <u 0x400<64> l0000000000000953
l0000000000000953:
	word32 eax_117 = SLICE(qwLoc18_226, word32, 0) + 1<32>
	word64 rcx_110 = qwLoc18_226 * 8<64> + rax_33
	branch qwLoc18_226 < 0xFFFFFFFFFFFFFFFF<64> l000000000000097A
l000000000000097A:
	real64 v22_124 = CONVERT(qwLoc18_226 + 1<64> >>u 1<64> | CONVERT(eax_117 & 1<32>, word32, uint64), word64, real64)
	xmm0 = SEQ(0<64>, v22_124 + v22_124)
l0000000000000973:
	xmm0 = SEQ(SLICE(xmm0, word64, 64), CONVERT(qwLoc18_226 + 1<64>, word64, real64))
l000000000000098F:
	Mem133[rcx_110:real64] = SLICE(xmm0, real64, 0)
	qwLoc18_226 = qwLoc18_226 + 1<64>
l00000000000009A2:
	word64 qwLoc20_232 = 0<64>
l00000000000009CC:
	branch qwLoc20_232 <u 0x400<64> l00000000000009AC
l00000000000009AC:
	Mem149[rax_50 + qwLoc20_232 * 8<64>:real64] = 0.0
	qwLoc20_232 = qwLoc20_232 + 1<64>
l00000000000009D6:
	vec_add(rax_33, rax_16, rax_50, 0x400<64>)
	word64 qwLoc28_241 = 0<64>
l0000000000000A2D:
	branch qwLoc28_241 <u 0x400<64> l00000000000009F8
l00000000000009F8:
	printf("%g\n", Mem170[rax_50 + qwLoc28_241 * 8<64>:word64])
	qwLoc28_241 = qwLoc28_241 + 1<64>
l0000000000000A37:
	_mm_free(rax_16)
	_mm_free(rax_33)
	_mm_free(rax_50)
	return
main_exit:


void __libc_csu_init(word64 rdx, word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi:[0..31] rdx:[0..63] rsi:[0..63]
// LiveOut:
// Trashed: SCZOP rax rdi rdx rsi Top
// Preserved: r12 r13 r14 r15 rbp rbx rsp
__libc_csu_init_entry:
	word64 rdi
	word32 edi = SLICE(rdi, word32, 0)
l0000000000000A70:
	_init()
	word64 rbp_31 = 0x0000000000200DF0<p64> - 0x0000000000200DE8<p64>
	branch rbp_31 >> 3<64> == 0<64> l0000000000000AC6
l0000000000000AA6:
	word64 rbx_47 = 0<u64>
l0000000000000AB0:
	call Mem26[0x0000000000200DE8<p64> + rbx_47 * 8<64>:word64] (retsize: 8;)
		uses: rdi:CONVERT(edi, word32, uint64),rdx:rdx,rsi:rsi
	rbx_47 = rbx_47 + 1<64>
	branch rbp_31 >> 3<64> != rbx_47 l0000000000000AB0
l0000000000000AC6:
	return
__libc_csu_init_exit:


void __libc_csu_fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: Top
// Preserved: rsp
__libc_csu_fini_entry:
l0000000000000AE0:
	return
__libc_csu_fini_exit:


