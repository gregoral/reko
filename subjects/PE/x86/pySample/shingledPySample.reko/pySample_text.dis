PyObject * fn10001000(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn10001000_entry:
	int32 dwLoc08
	int32 dwLoc04
l10001000:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002144<32>, &dwLoc04, &dwLoc08)
	branch eax_17 != 0<32> l10001027
l10001027:
	return Py_BuildValue(0x1000214C<32>, Mem16[&dwLoc04:word32] + Mem16[&dwLoc08:word32])
l10001023:
	return eax_17
fn10001000_exit:


PyObject * fn10001050(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn10001050_entry:
	int32 dwLoc08
	int32 dwLoc04
l10001050:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002150<32>, &dwLoc08, &dwLoc04)
	branch eax_17 != 0<32> l10001078
l10001078:
	return Py_BuildValue(0x1000214C<32>, Mem16[&dwLoc08:word32] - Mem16[&dwLoc04:word32])
l10001074:
	return eax_17
fn10001050_exit:


PyObject * fn100010A0(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn100010A0_entry:
	int32 dwLoc08
	int32 dwLoc04
l100010A0:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002158<32>, &dwLoc08, &dwLoc04)
	branch eax_17 != 0<32> l100010C8
l100010C8:
	return Py_BuildValue(0x1000214C<32>, CONVERT(CONVERT(Mem16[&dwLoc08:word32], word32, int64) /32 Mem16[&dwLoc04:word32], word32, int32))
l100010C4:
	return eax_17
fn100010A0_exit:


PyObject * fn100010F0(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn100010F0_entry:
	real32 rLoc08
	real32 rLoc04
l100010F0:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002160<32>, &rLoc08, &rLoc04)
	branch eax_17 != 0<32> l10001118
l10001118:
	return Py_BuildValue(0x10002168<32>, CONVERT(Mem16[&rLoc08:real32], real32, real64) / CONVERT(Mem16[&rLoc04:real32], real32, real64))
l10001114:
	return eax_17
fn100010F0_exit:


void initpySample()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: esp
initpySample_entry:
l10001170:
	Py_InitModule4(0x10002174<32>, 0x10003010<32>, 0<32>, 0<32>, 0x3EF<32>)
	return
initpySample_exit:


word32 fn100011E9(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ebxOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
// MayUse:  fs:[0..15] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ebx edi esi
// Trashed: SCZOP eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn100011E9_entry:
	ptr32 fp
	word32 ebx
	word32 esi
	word32 edi
	selector fs
l100011E9:
	word32 eax_14
	word32 ebp_150 = 0<32>
	branch dwArg08 != 0<32> l10001202
l100011F4:
	branch Mem8[0x10003070<p32>:word32] <= 0<32> l10001233
l10001233:
	eax_14 = 0<32>
l100011FC:
	Mem19[0x10003070<p32>:word32] = Mem8[0x10003070<p32>:word32] - 1<32>
l10001202:
	Mem39[0x100033A4<p32>:word32] = Mem24[adjust_fdiv:word32]
	word32 esp_122 = fp - 16<i32>
	branch dwArg08 != 1<32> l100012E8
l100012E8:
	branch dwArg08 != 0<32> l1000137E
l100012F0:
l10001308:
	branch InterlockedCompareExchange(0x100033AC<p32>, 1<32>, 0<32>) != 0<32> l100012FD
l100012FD:
	Sleep(0x3E8<32>)
l10001312:
	branch Mem54[0x100033A8<p32>:word32] == 2<32> l10001326
l10001326:
	word32 eax_71 = _decode_pointer(Mem54[0x100033B4<p32>:word32])
	word32 esp_109 = fp - 16<i32>
	branch eax_71 == 0<32> l1000136F
l1000133B:
	word32 esp_101 = fp - 16<i32>
	word32 edi_85 = _decode_pointer(Mem69[0x100033B0<p32>:word32])
l10001350:
	edi_85 = edi_85 - 4<32>
	branch edi_85 >=u eax_71 l10001348
l10001348:
	word32 eax_92 = Mem81[edi_85:word32]
	branch eax_92 == 0<32> l10001350
l1000134E:
	word32 ecx_103
	word32 edx_296
	call eax_92 (retsize: 4;)
		uses: ecx:ecx_103,edx:edx_296
		defs: ecx:ecx_103,edx:edx_296,esp:esp_101
l10001357:
	word32 esp_106 = esp_101 - 4<i32>
	Mem107[esp_106:word32] = eax_71
	free(Mem107[esp_106:(ptr32 void)])
	word32 eax_110 = _encoded_null()
	Mem111[0x100033B0<p32>:word32] = eax_110
	Mem112[0x100033B4<p32>:word32] = eax_110
	esp_109 = esp_106 + 4<i32>
l1000136F:
	word32 esp_114 = esp_109 - 4<i32>
	Mem115[esp_114:word32] = 0<32>
	Mem118[esp_114 - 4<i32>:word32] = 0x100033AC<p32>
	Mem120[0x100033A8<p32>:word32] = 0<32>
	InterlockedExchange(Mem120[esp_114 - 4<i32>:(ptr32 LONG)], Mem120[esp_114:LONG])
	esp_122 = esp_114 + 4<32>
l1000131C:
	_amsg_exit(0x1F<32>)
l1000121C:
	word32 edi_128 = Mem39[Mem39[fs:0x18<32>:word32] + 4<i32>:word32]
l1000124B:
	word32 eax_140 = InterlockedCompareExchange(0x100033AC<p32>, edi_128, 0<32>)
	branch eax_140 != 0<32> l1000123A
l1000123A:
	branch eax_140 == edi_128 l10001255
l10001255:
	ebp_150 = 1<32>
l1000123E:
	Sleep(0x3E8<32>)
l10001253:
l10001258:
	branch Mem139[0x100033A8<p32>:word32] == 0<32> l1000126D
l1000126D:
	Mem172[0x100033A8<p32>:word32] = 1<32>
	esp_122 = fp - 16<i32>
	branch _initterm_e(0x100020A0<32>, 0x100020A8<32>) == 0<32> l10001293
l10001293:
	_initterm(0x10002098<32>, 0x1000209C<32>)
	Mem188[0x100033A8<p32>:word32] = 2<32>
	branch ebp_150 != 0<32> l100012B6
l100012AE:
	InterlockedExchange(0x100033AC<p32>, ebp_150)
l100012B6:
	esp_122 = fp - 16<i32>
	branch Mem204[0x100033B8<p32>:word32] == 0<32> l100012DD
l100012BF:
	esp_122 = fp - 16<i32>
	word32 edi_222
	branch fn10001742(InterlockedCompareExchange, 0x100033AC<p32>, 2<32>, out edi_222) == 0<32> l100012DD
l100012CE:
	word32 ecx_250
	word32 edx_252
	call Mem243[0x100033B8<p32>:word32] (retsize: 4;)
		uses: ecx:ecx_250,edx:edx_252,Stack +0004:dwArg04,Stack +0008:edi_222,Stack +000C:dwArg0C,Stack +0024:dwArg04,Stack +0028:dwArg08,Stack +002C:dwArg0C
		defs: ecx:ecx_250,edx:edx_252,esp:esp_248
l100012DD:
	Mem256[0x10003070<p32>:word32] = Mem254[0x10003070<p32>:word32] + 1<32>
l1000137E:
	eax_14 = 1<32>
l1000128C:
	eax_14 = 0<32>
l10001381:
	word32 esp_272 = esp_122 + 4<i32>
	edi = Mem269[esp_122:word32]
	esi = Mem269[esp_272:word32]
	ebx = Mem269[esp_272 + 4<i32>:word32]
l10001384:
	ebxOut = ebx
	esiOut = esi
	ediOut = edi
	return eax_14
fn100011E9_exit:
l10001264:
	_amsg_exit(0x1F<32>)


word32 fn10001388(word32 ecx, word32 edx, word32 ebx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse:  ebx:[0..31] ecx:[0..31] edi:[0..31] edx:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax
// Trashed: SCZOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn10001388_entry:
	ptr32 fp
	word32 dwLoc0C
l10001388:
	word32 ebp_13 = fn100017E8(ebx, esi, edi, dwLoc0C, 0x10<32>)
	word32 ebx_115 = Mem7[ebp_13 + 8<i32>:word32]
	Mem25[ebp_13 - 28<i32>:word32] = 1<32>
	Mem27[ebp_13 - 4<i32>:word32] = 0<32>
	Mem28[0x10003008<p32>:word32] = edx
	Mem29[ebp_13 - 4<i32>:word32] = 1<32>
	word32 esp_101 = fp - 8<i32>
	word32 edi_109 = ecx
	word32 esi_112 = edx
	branch edx != 0<32> l100013C3
l100013B3:
	branch Mem29[0x10003070<p32>:word32] != 0<32> l100013C3
l100013C3:
	branch edx == 1<32> l100013CC
l100013C7:
	branch edx != 2<32> l100013FA
l100013CC:
	branch Mem29[0x100020CC<p32>:word32] == 0<32> l100013DD
l100013D5:
	Mem74[ebp_13 - 28<i32>:word32] = fn00000000(ebx_115, edx, ecx)
	esp_101 = fp - 20<i32> (alias)
l100013DD:
	branch Mem76[ebp_13 - 28<i32>:word32] == 0<32> l1000147A
l100013E7:
	word32 esp_80 = esp_101 - 4<i32>
	Mem82[esp_80:word32] = ecx
	Mem85[esp_80 - 4<i32>:word32] = edx
	Mem88[esp_80 - 8<i32>:word32] = ebx_115
	word32 eax_90 = fn100011E9(Mem88[esp_80 - 8<i32>:word32], Mem88[esp_80 - 4<i32>:word32], Mem88[esp_80:word32], out ebx_115, out esi_112, out edi_109)
	Mem102[ebp_13 - 28<i32>:word32] = eax_90
	esp_101 = esp_80 + 4<32>
	branch eax_90 == 0<32> l1000147A
l100013FA:
	word32 esp_108 = esp_101 - 4<i32>
	Mem110[esp_108:word32] = edi_109
	Mem113[esp_108 - 4<i32>:word32] = esi_112
	Mem116[esp_108 - 8<i32>:word32] = ebx_115
	word32 eax_117 = fn100017C6(Mem116[esp_108 - 8<i32>:word32], Mem116[esp_108 - 4<i32>:word32])
	Mem124[ebp_13 - 28<i32>:word32] = eax_117
	esp_101 = esp_108 + 4<32>
	branch esi_112 != 1<32> l1000142E
l1000140A:
	branch eax_117 != 0<32> l1000142E
l1000140E:
	Mem132[esp_108:word32] = edi_109
	Mem134[esp_108 - 4<i32>:word32] = eax_117
	Mem136[esp_108 - 8<i32>:word32] = ebx_115
	fn100017C6(Mem136[esp_108 - 8<i32>:word32], Mem136[esp_108 - 4<i32>:word32])
	Mem144[esp_108:word32] = edi_109
	Mem146[esp_108 - 4<i32>:word32] = 0<32>
	Mem148[esp_108 - 8<i32>:word32] = ebx_115
	fn100011E9(Mem148[esp_108 - 8<i32>:word32], Mem148[esp_108 - 4<i32>:word32], Mem148[esp_108:word32], out ebx_115, out esi_112, out edi_109)
	esp_101 = esp_108 + 4<32>
	branch Mem148[0x100020CC<p32>:word32] == 0<32> l1000142E
l10001428:
	fn00000000(ebx_115, 0<32>, edi_109)
	esp_101 = esp_108 - 8<i32> (alias)
l1000142E:
	branch esi_112 == 0<32> l10001437
l10001432:
	branch esi_112 != 3<32> l1000147A
l10001437:
	word32 esp_190 = esp_101 - 4<i32>
	Mem193[esp_190:word32] = edi_109
	Mem196[esp_190 - 4<i32>:word32] = esi_112
	Mem200[esp_190 - 8<i32>:word32] = ebx_115
	word32 ebx_204
	word32 esi_206
	word32 edi_207
	word32 eax_203 = fn100011E9(Mem200[esp_190 - 8<i32>:word32], Mem200[esp_190 - 4<i32>:word32], Mem200[esp_190:word32], out ebx_204, out esi_206, out edi_207)
	esp_101 = esp_190 + 4<32>
	branch eax_203 != 0<32> l10001446
l10001443:
	Mem222[ebp_13 - 28<i32>:word32] = Mem200[ebp_13 - 28<i32>:word32] & eax_203
l10001446:
	branch Mem227[ebp_13 - 28<i32>:word32] == 0<32> l1000147A
l1000144C:
	branch Mem227[0x100020CC<p32>:word32] == 0<32> l1000147A
l10001455:
	Mem257[ebp_13 - 28<i32>:word32] = fn00000000(ebx_204, esi_206, edi_207)
	esp_101 = esp_190 - 8<i32> (alias)
l100013BB:
	Mem258[ebp_13 - 28<i32>:word32] = 0<32>
l1000147A:
	Mem263[ebp_13 - 4<i32>:word32] = 0<32>
	Mem267[ebp_13 - 4<i32>:word32] = 0xFFFFFFFE<32>
	fn10001493()
	word32 eax_268 = Mem267[ebp_13 - 28<i32>:word32]
	fn1000182D(ebp_13, Mem267[esp_101 + -4<i32>:word32])
	return eax_268
fn10001388_exit:


void fn10001493()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
// MayUse: 
// LiveOut:
// Trashed: Top
// Preserved: esp
fn10001493_entry:
l10001493:
	Mem4[0x10003008<p32>:word32] = 0xFFFFFFFF<32>
	return
fn10001493_exit:


BOOL DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved)
// stackDelta: 16; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
DllMain_entry:
	word32 ebx
	word32 esi
	word32 edi
l1000149E:
	branch dwReason != 1<32> l100014AA
l100014A5:
	fn10001864()
l100014AA:
	return fn10001388(lpReserved, dwReason, ebx, esi, edi)
DllMain_exit:


word32 fn100015CF(word32 ebx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn1000166E
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi esi Top
// Preserved: esp
fn100015CF_entry:
	word32 dwLoc0C
	void * ptrLoc10
	_onexit_t tLoc1C
	PVFV ** ptrLoc18
	PVFV ** ptrLoc14
l100015CF:
	word32 dwLoc0C_107
	word32 eax_112
	word32 ebp_13 = fn100017E8(ebx, esi, edi, dwLoc0C, 0x14<32>)
	word32 eax_22 = _decode_pointer(Mem7[0x100033B4<p32>:word32])
	Mem25[ebp_13 - 28<i32>:word32] = eax_22
	branch eax_22 != 0xFFFFFFFF<32> l100015FE
l100015FE:
	lock(8<32>)
	Mem38[ebp_13 - 4<i32>:word32] = 0<32>
	word32 v16_42 = Mem38[0x100033B4<p32>:word32]
	Mem46[ebp_13 - 28<i32>:word32] = _decode_pointer(8<32>)
	word32 v17_47 = Mem46[0x100033B0<p32>:word32]
	Mem51[ebp_13 - 32<i32>:word32] = _decode_pointer(ptrLoc10)
	word32 v18_58 = Mem57[ebp_13 + 8<i32>:word32]
	Mem62[ebp_13 - 36<i32>:word32] = __dllonexit(tLoc1C, ptrLoc18, ptrLoc14)
	Mem72[0x100033B4<p32>:word32] = encode_pointer(8<32>, Mem62[ebp_13 - 28<i32>:word32], v18_58, ebp_13 - 28<i32>, ebp_13 - 32<i32>, v17_47, v16_42)
	Mem83[0x100033B0<p32>:word32] = encode_pointer(8<32>, Mem72[ebp_13 - 32<i32>:word32])
	Mem84[ebp_13 - 4<i32>:word32] = 0xFFFFFFFE<32>
	fn10001665()
	dwLoc0C_107 = 8<32>
	eax_112 = Mem84[ebp_13 - 36<i32>:word32]
l100015F2:
	word32 v11_87 = Mem25[ebp_13 + 8<i32>:word32]
	dwLoc0C_107 = v11_87
	eax_112 = _onexit(v11_87)
l1000165F:
	fn1000182D(ebp_13, dwLoc0C_107)
	return eax_112
fn100015CF_exit:


void fn10001665()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn100015CF
// MayUse: 
// LiveOut:
// Trashed: ecx Top
// Preserved: esp
fn10001665_entry:
l10001665:
	unlock()
	return
fn10001665_exit:


void fn1000166E(word32 ebx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut:
// Trashed: SCZO eax ebp ebx ecx edi esi Top
// Preserved: esp
fn1000166E_entry:
l1000166E:
	fn100015CF(ebx, esi, edi)
	return
fn1000166E_exit:


void fn10001680()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZOP eax Top
// Preserved: edi esi esp
fn10001680_entry:
l10001680:
	word32 esi_13 = 0x100021D8<p32>
	branch true l100016A1
l10001692:
	branch Mem9[esi_13:word32] == 0<32> l1000169A
l10001698:
	fn00000000()
l1000169A:
	esi_13 = esi_13 + 4<32>
	branch esi_13 <u 0x100021D8<p32> l10001692
l100016A1:
	return
fn10001680_exit:


word32 fn100016D0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001742
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn100016D0_entry:
l100016D0:
	branch Mem0[dwArg04:word16] == 0x5A4D<16> l100016DE
l100016DE:
	word32 eax_9 = Mem0[dwArg04 + 60<i32>:word32] + dwArg04
	branch Mem0[eax_9:word32] != 0x4550<32> l100016DB
l100016EB:
	return CONVERT(CONVERT(Mem0[eax_9 + 24<i32>:word16] == 0x10B<16>, bool, int8), int8, uint32)
l100016DB:
	return 0<32>
fn100016D0_exit:


word32 fn10001700(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001742
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZOP eax ecx edx Top
// Preserved: ebx edi esi esp
fn10001700_entry:
l10001700:
	word32 ecx_7 = Mem0[dwArg04 + 60<i32>:word32] + dwArg04
	word32 esi_15 = CONVERT(Mem14[ecx_7 + 6<i32>:word16], word16, word32)
	word32 edx_16 = 0<32>
	word32 eax_23 = CONVERT(Mem0[ecx_7 + 20<i32>:word16], word16, word32) + 24<i32> + ecx_7
	branch esi_15 <=u 0<32> l1000173C
l1000171E:
l10001722:
	word32 ecx_29 = Mem22[eax_23 + 12<i32>:word32]
	branch dwArg08 <u ecx_29 l10001732
l10001729:
	branch dwArg08 <u Mem22[eax_23 + 8<i32>:word32] + ecx_29 l1000173E
l10001732:
	edx_16 = edx_16 + 1<32>
	eax_23 = eax_23 + 0x28<32>
	branch edx_16 <u esi_15 l10001722
l1000173C:
	eax_23 = 0<32>
l1000173E:
	return eax_23
fn10001700_exit:


word32 fn10001742(word32 ebx, word32 esi, word32 edi, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn100011E9
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax edi
// Trashed: SCZOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn10001742_entry:
	word32 dwLoc0C
l10001742:
	word32 eax_63
	word32 ebp_13 = fn100017E8(ebx, esi, edi, dwLoc0C, 8<32>)
	Mem19[ebp_13 - 4<i32>:word32] = 0<32>
	word32 dwLoc0C_90 = 0x10000000<p32>
	branch fn100016D0(0x10000000<p32>) == 0<32> l1000179F
l10001762:
	word32 eax_38 = Mem25[ebp_13 + 8<i32>:word32]
	dwLoc0C_90 = eax_38 - 0x10000000<p32>
	word32 eax_45 = fn10001700(0x10000000<p32>, eax_38 - 0x10000000<p32>)
	branch eax_45 == 0<32> l1000179F
l1000179F:
	Mem62[ebp_13 - 4<i32>:word32] = 0xFFFFFFFE<32>
	eax_63 = 0<32>
l10001774:
	eax_63 = ~(Mem44[eax_45 + 36<i32>:word32] >>u 0x1F<32>) & 1<32>
	Mem74[ebp_13 - 4<i32>:word32] = 0xFFFFFFFE<32>
l100017A8:
	ediOut = fn1000182D(ebp_13, dwLoc0C_90)
	return eax_63
fn10001742_exit:


word32 fn100017C6(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn100017C6_entry:
l100017C6:
	branch dwArg08 != 1<32> l100017E0
l100017CD:
	branch Mem0[0x100020CC<p32>:word32] != 0<32> l100017E0
l100017D6:
	DisableThreadLibraryCalls(dwArg04)
l100017E0:
	return 1<32>
fn100017C6_exit:


word32 fn100017E8(word32 ebx, word32 esi, word32 edi, word32 dwArg00, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
//      fn100015CF
//      fn10001742
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15] Stack +0000:[0..31] Stack +0008:[0..31]
// LiveOut: ebp
// Trashed: SCZO eax ebp Top
// Preserved: esp
fn100017E8_entry:
	ptr32 fp
	selector fs
l100017E8:
	word32 esp_14 = fp - 8<i32> - dwArg08
	Mem17[esp_14 - 4<i32>:word32] = ebx
	Mem20[esp_14 - 8<i32>:word32] = esi
	Mem23[esp_14 - 12<i32>:word32] = edi
	Mem33[esp_14 - 16<i32>:word32] = Mem23[0x10003000<p32>:word32] ^ fp + 8<i32>
	Mem37[esp_14 - 20<i32>:word32] = dwArg00
	Mem42[fs:0<32>:word32] = fp - 8<i32>
	return fp + 8<i32>
fn100017E8_exit:


word32 fn1000182D(word32 ebp, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
//      fn100015CF
//      fn10001742
// MayUse:  ebp:[0..31] fs:[0..15] Stack +0000:[0..31]
// LiveOut: edi
// Trashed: ebp ebx ecx edi esi esp Top
// Preserved:
fn1000182D_entry:
	selector fs
	word32 dwArg08
l1000182D:
	Mem8[fs:0<32>:word32] = Mem0[ebp - 16<i32>:word32]
	Mem22[ebp:word32] = dwArg00
	return dwArg08
fn1000182D_exit:


void fn10001864()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse: 
// LiveOut:
// Trashed: SCZOP eax Top
// Preserved: ebp ebx edi esi esp
fn10001864_entry:
	LARGE_INTEGER tLoc14
	struct _FILETIME tLoc0C
l10001864:
	word32 eax_9 = Mem6[0x10003000<p32>:word32]
	Mem11[&tLoc0C:word32] = 0<32>
	Mem14[&tLoc0C + 4<i32>:word32] = 0<32>
	branch eax_9 == 0xBB40E64E<32> l10001894
l10001887:
	branch (eax_9 & 0xFFFF0000<32>) == 0<32> l10001894
l10001894:
	GetSystemTimeAsFileTime(&tLoc0C)
	word32 esi_47 = Mem38[&tLoc0C + 4<i32>:word32] ^ Mem38[&tLoc0C:word32] ^ GetCurrentProcessId() ^ GetCurrentThreadId() ^ GetTickCount()
	QueryPerformanceCounter(&tLoc14)
	word32 esi_55 = esi_47 ^ (Mem50[&tLoc14 + 4<i32>:word32] ^ Mem50[&tLoc14:word32])
	branch esi_55 != 0xBB40E64E<32> l100018DA
l100018DA:
	branch (esi_55 & 0xFFFF0000<32>) != 0<32> l100018E5
l100018DE:
	esi_55 = esi_55 | esi_55 << 0x10<32>
l100018D3:
	esi_55 = 0xBB40E64F<32>
l100018E5:
	Mem72[0x10003000<p32>:word32] = esi_55
	Mem74[0x10003004<p32>:word32] = ~esi_55
l1000188B:
	Mem79[0x10003004<p32>:word32] = ~eax_9
l100018F4:
	return
fn10001864_exit:


